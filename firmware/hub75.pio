;
; Based on HUB75 PIO example
;

.program hub75_data
.side_set 1

; Side-set 0 is CLK
; Data pins are R0, G0, B0, R1, G1, B1

public entry_point:
.wrap_target
public shift0:
    pull             side 0 ; gets patched to `out null, n` if n nonzero (otherwise the PULL is required for fencing)
    in osr, 1        side 0 ; shuffle shuffle shuffle
    out null, 8      side 0
    in osr, 1        side 0
    out null, 8      side 0
    in osr, 1        side 0
    out null, 32     side 0 ; Discard remainder of OSR contents
public shift1:
    pull             side 0 ; gets patched to out null, n if n is nonzero (otherwise PULL required)
    in osr, 1        side 1 ; Note this posedge clocks in the data from the previous iteration
    out null, 8      side 1
    in osr, 1        side 1
    out null, 8      side 1
    in osr, 1        side 1
    out null, 32     side 1
    in null, 26      side 1 ; Note we are just doing this little manoeuvre here to get GPIOs in the order
    mov pins, ::isr  side 1 ; R0, G0, B0, R1, G1, B1. Can go 1 cycle faster if reversed
.wrap

% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

static inline void hub75_data_program_init(PIO pio, uint sm, uint offset, uint basepin, uint clockpin) {
    pio_sm_config c = hub75_data_program_get_default_config(offset);

    pio_sm_set_consecutive_pindirs(pio, sm, basepin, 6, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clockpin, 1, true);
    for (int i = basepin; i<basepin+6; i++) {
        pio_gpio_init(pio, i);
    }
    pio_gpio_init(pio, clockpin);

    sm_config_set_out_pins(&c, basepin, 6);
    sm_config_set_sideset_pins(&c, clockpin);
    sm_config_set_out_shift(&c, true, true, 24);

    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Uncomment to slow down everything. Useful when using a logic analyzer
    //sm_config_set_clkdiv(&c, 16);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, offset + hub75_data_offset_entry_point);
    pio_sm_set_enabled(pio, sm, true);
}

// Patch a data program at `offset` to preshift pixels by `shamt`
static inline void hub75_data_set_shift(PIO pio, uint sm, uint offset, uint shamt) {
    uint16_t instr;
    if (shamt == 0)
        instr = pio_encode_pull(false, true); // blocking PULL
    else
        instr = pio_encode_out(pio_null, shamt);
    pio->instr_mem[offset + hub75_data_offset_shift0] = instr;
    pio->instr_mem[offset + hub75_data_offset_shift1] = instr;
}

%}

.program hub75_row

; side-set pin 0 is LATCH
; side-set pin 1 is OEn
; OUT pins are row select A-E
;
; Each FIFO record consists of:
; - 5-bit row select (5 LSBs)
; - Pulse width - 1 (27 MSBs)
;
; Repeatedly select a row, pulse LATCH, and generate a pulse of a certain
; width on OEn.

.side_set 2

.wrap_target
    out pins, 5 [7]    side 0x2 ; Deassert OEn, output row select
    out x, 27   [7]    side 0x3 ; Pulse LATCH, get OEn pulse width
pulse_loop:
    jmp x-- pulse_loop side 0x0 ; Assert OEn for x+1 cycles
.wrap

% c-sdk {
static inline void hub75_row_program_init(PIO pio, uint sm, uint offset, uint row_base_pin, uint n_row_pins, uint latch_base_pin) {
    pio_sm_set_consecutive_pindirs(pio, sm, row_base_pin, n_row_pins, true);
    pio_sm_set_consecutive_pindirs(pio, sm, latch_base_pin, 2, true);
    for (uint i = row_base_pin; i < row_base_pin + n_row_pins; ++i)
        pio_gpio_init(pio, i);
    pio_gpio_init(pio, latch_base_pin);
    pio_gpio_init(pio, latch_base_pin + 1);

    pio_sm_config c = hub75_row_program_get_default_config(offset);
    sm_config_set_out_pins(&c, row_base_pin, n_row_pins);
    sm_config_set_sideset_pins(&c, latch_base_pin);
    sm_config_set_out_shift(&c, true, true, 32);

    // Uncomment to slow down everything. Useful when using a logic analyzer
    //sm_config_set_clkdiv(&c, 16);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void hub75_wait_tx_stall(PIO pio, uint sm) {
    uint32_t txstall_mask = 1u << (PIO_FDEBUG_TXSTALL_LSB + sm);
    pio->fdebug = txstall_mask;
    while (!(pio->fdebug & txstall_mask))
        tight_loop_contents();
}
%}